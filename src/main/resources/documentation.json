{
  "openapi": "3.0.1",
  "info":
  {
    "title": "Authentication Service Test Tack",
    "description": "Сервис реализует регистрацию, аутентификацию и авторизацию пользователя",
    "contact":
    {
      "name": "Alexey Kaptur",
      "email": "kaptur.swdev@gmail.com"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }],
  "paths":
  {
    "/api/info":
    {
      "get":
      {
        "tags": ["Контроллер предоставления сведений о текущем пользователе"],
        "summary": "Возвращает уникальный идентификатор авторизированного пользователя",
        "operationId": "viewInfoAboutUser",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema":
            {
              "type": "string",
              "enum": ["application/json"]
            }
          }],
        "responses":
        {
          "401":
          {
            "description": "Unauthorized",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            }
          },
          "400":
          {
            "description": "Bad Request",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "200":
          {
            "description": "OK",
            "content":
            {
              "application/json":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/IdDTO"
                }
              }
            }
          }
        }
      },
      "put":
      {
        "tags": ["Контроллер предоставления сведений о текущем пользователе"],
        "summary": "Изменяет данные авторизованного пользователя",
        "description": "Заменяет каждое поле у авторизированного пользователя и сохраняет изменения в БД",
        "operationId": "changeUserData",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema":
            {
              "type": "string",
              "enum": ["application/json"]
            }
          }],
        "requestBody":
        {
          "content":
          {
            "application/json":
            {
              "schema":
              {
                "$ref": "#/components/schemas/UserDTO"
              }
            }
          },
          "required": true
        },
        "responses":
        {
          "401":
          {
            "description": "Unauthorized",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            }
          },
          "400":
          {
            "description": "Bad Request",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "204":
          {
            "description": "No Content"
          }
        }
      },
      "delete":
      {
        "tags": ["Контроллер предоставления сведений о текущем пользователе"],
        "summary": "Удаление авторизированного пользователя",
        "description": "Метод выполняет удаление авторизованного пользователя из БД, а также удаляет данные о нем из контекста авторизации.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema":
            {
              "type": "string",
              "enum": ["application/json"]
            }
          }],
        "responses":
        {
          "401":
          {
            "description": "Unauthorized",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            }
          },
          "400":
          {
            "description": "Bad Request",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "204":
          {
            "description": "No Content"
          }
        }
      }
    },
    "/api/register":
    {
      "post":
      {
        "tags": ["Контроллер для регистрации пользователя"],
        "summary": "Метод регистрации пользователя.",
        "description": "Принимает данные пользователя в формате JSON ивозвращает статус OK при предоставлении корректных данных и успешного добавления в БД. При возникновении ошибок отправляет AuthenticationErrorResponse/ValidationErrorResponse.",
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema":
            {
              "type": "string",
              "enum": ["application/json"]
            }
          }],
        "requestBody":
        {
          "content":
          {
            "application/json":
            {
              "schema":
              {
                "$ref": "#/components/schemas/UserDTO"
              }
            }
          },
          "required": true
        },
        "responses":
        {
          "401":
          {
            "description": "Unauthorized",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            }
          },
          "400":
          {
            "description": "Bad Request",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "200":
          {
            "description": "OK",
            "content":
            {
              "application/json":
              {
                "schema":
                {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/login/password":
    {
      "post":
      {
        "tags": ["Контроллер для аутентификации/авторизации пользователя"],
        "summary": "Метод аутентификации/авторизации пользователя по логину/паролю.",
        "description": "Принимает логин/пароль в формате JSON и возвращает статус OK в случае успешной авторизации. При возникновении ошибок отправляет AuthenticationErrorResponse.",
        "operationId": "authenticateUserWithPassword",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema":
            {
              "type": "string",
              "enum": ["application/json"]
            }
          }],
        "requestBody":
        {
          "content":
          {
            "application/json":
            {
              "schema":
              {
                "$ref": "#/components/schemas/SignInWithPasswordDTO"
              }
            }
          },
          "required": true
        },
        "responses":
        {
          "401":
          {
            "description": "Unauthorized",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            }
          },
          "400":
          {
            "description": "Bad Request",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "200":
          {
            "description": "OK",
            "content":
            {
              "application/json":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/JwtResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/login/access_code":
    {
      "post":
      {
        "tags": ["Контроллер для аутентификации/авторизации пользователя"],
        "summary": "Метод аутентификации/авторизации пользователя по коду доступа.",
        "description": "Принимает код доступа в формате JSON и возвращает статус OK в случае успешной авторизации. При возникновении ошибок отправляет AuthenticationErrorResponse.",
        "operationId": "authenticateUserWithAccessCode",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema":
            {
              "type": "string",
              "enum": ["application/json"]
            }
          }],
        "requestBody":
        {
          "content":
          {
            "application/json":
            {
              "schema":
              {
                "$ref": "#/components/schemas/SignInWithCodeDTO"
              }
            }
          },
          "required": true
        },
        "responses":
        {
          "401":
          {
            "description": "Unauthorized",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/AuthenticationErrorResponse"
                }
              }
            }
          },
          "400":
          {
            "description": "Bad Request",
            "content":
            {
              "*/*":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          },
          "200":
          {
            "description": "OK",
            "content":
            {
              "application/json":
              {
                "schema":
                {
                  "$ref": "#/components/schemas/JwtResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components":
  {
    "schemas":
    {
      "AuthenticationErrorResponse":
      {
        "type": "object",
        "properties":
        {
          "httpCode":
          {
            "type": "string"
          },
          "message":
          {
            "type": "string"
          }
        },
        "description": "Сущность ошибок аутентификации"
      },
      "ValidationErrorResponse":
      {
        "type": "object",
        "properties":
        {
          "violations":
          {
            "type": "array",
            "items":
            {
              "$ref": "#/components/schemas/Violation"
            }
          }
        },
        "description": "Объект для предоставления списка ошибок валидации"
      },
      "Violation":
      {
        "type": "object",
        "properties":
        {
          "fieldName":
          {
            "type": "string"
          },
          "message":
          {
            "type": "string"
          }
        },
        "description": "Ошибка валидации, содержащая имя поля/сообщение о нарушении."
      },
      "UserDTO":
      {
        "required": ["accessCode", "login", "password"],
        "type": "object",
        "properties":
        {
          "login":
          {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "password":
          {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string"
          },
          "accessCode":
          {
            "maxLength": 2147483647,
            "minLength": 8,
            "type": "string"
          }
        },
        "description": "SignUpDTO для создания пользователя в системе"
      },
      "SignInWithPasswordDTO":
      {
        "type": "object",
        "properties":
        {
          "login":
          {
            "type": "string"
          },
          "password":
          {
            "type": "string"
          }
        },
        "description": "Логин/пароль в формате JSON"
      },
      "JwtResponse":
      {
        "type": "object",
        "properties":
        {
          "token":
          {
            "type": "string"
          },
          "expiresIn":
          {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SignInWithCodeDTO":
      {
        "type": "object",
        "properties":
        {
          "accessCode":
          {
            "type": "string"
          }
        },
        "description": "Пользовательский код доступа в формате JSON"
      },
      "IdDTO":
      {
        "type": "object",
        "properties":
        {
          "id":
          {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Идентификатор авторизированного пользователя"
      }
    }
  }
}